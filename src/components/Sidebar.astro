---
export interface Props {
  categories: string[];
  tags: string[];
  selectedCategory?: string;
  selectedTag?: string;
  searchQuery?: string;
}

const { categories, tags, selectedCategory, selectedTag, searchQuery } = Astro.props;
---

<aside id="sidebar" class="fixed left-0 top-0 h-full w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-transform duration-300 z-20">
  <div class="p-4 h-full overflow-y-auto">
    <!-- Logo/Title -->
    <div class="mb-6">
      <h2 class="text-xl font-bold text-gray-900 dark:text-white">PKM</h2>
    </div>

    <!-- Search -->
    <div class="mb-6">
      <input
        type="text"
        id="search-input"
        placeholder="Search PKM..."
        value={searchQuery || ''}
        class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
      />
    </div>

    <!-- Categories -->
    <div class="mb-6">
      <h3 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2 uppercase tracking-wider">Categories</h3>
      <ul class="space-y-1">
        <li>
          <a
            href="/"
            class={`block px-3 py-2 text-sm rounded-md transition-colors ${
              !selectedCategory && !selectedTag && Astro.url.searchParams.get('favorites') !== 'true' ? 'bg-primary text-primary-foreground' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
            }`}
          >
            All Entries
          </a>
        </li>
        <li>
          <a
            href="/?favorites=true"
            class={`block px-3 py-2 text-sm rounded-md transition-colors ${
              Astro.url.searchParams.get('favorites') === 'true' ? 'bg-primary text-primary-foreground' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
            }`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline mr-2">
              <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
            </svg>
            Favorites
          </a>
        </li>
        {categories.map((category) => (
          <li>
            <a
              href={`/?category=${encodeURIComponent(category)}`}
              class={`block px-3 py-2 text-sm rounded-md transition-colors ${
                selectedCategory === category ? 'bg-primary text-primary-foreground' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              {category}
            </a>
          </li>
        ))}
      </ul>
    </div>

    <!-- Tags -->
    <div class="mb-6">
      <h3 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2 uppercase tracking-wider">Tags</h3>
      <div class="flex flex-wrap gap-2">
        {tags.map((tag) => (
          <a
            href={`/?tag=${encodeURIComponent(tag)}`}
            class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium transition-colors ${
              selectedTag === tag
                ? 'bg-primary text-primary-foreground'
                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
            }`}
          >
            #{tag}
          </a>
        ))}
      </div>
    </div>

    <!-- Actions -->
    <div class="mt-auto pt-4 border-t border-gray-200 dark:border-gray-700 space-y-2">
      <button
        id="add-note-btn"
        class="w-full px-4 py-2 text-sm font-medium text-primary-foreground bg-primary hover:bg-primary/90 rounded-md transition-colors flex items-center justify-center gap-2"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M12 5v14m-7-7h14"/>
        </svg>
        Add New Note
      </button>
      <a
        href="/notes/templates"
        class="w-full px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors flex items-center justify-center gap-2"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
          <line x1="9" y1="9" x2="15" y2="9"/>
          <line x1="9" y1="13" x2="15" y2="13"/>
          <line x1="9" y1="17" x2="11" y2="17"/>
        </svg>
        Templates
      </a>
    </div>
  </div>
</aside>

<!-- Sidebar Toggle Button -->
<button
  id="sidebar-toggle"
  class="fixed left-4 top-4 z-30 p-2 rounded-md bg-white dark:bg-gray-800 shadow-md lg:hidden"
  aria-label="Toggle sidebar"
>
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M3 12h18M3 6h18M3 18h18"/>
  </svg>
</button>

<script>
  // Sidebar toggle functionality
  const sidebar = document.getElementById('sidebar');
  const sidebarToggle = document.getElementById('sidebar-toggle');
  
  sidebarToggle?.addEventListener('click', () => {
    sidebar?.classList.toggle('-translate-x-full');
  });

  // Search functionality
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  let searchTimeout: ReturnType<typeof setTimeout>;
  
  searchInput?.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    const query = (e.target as HTMLInputElement).value;
    
    searchTimeout = setTimeout(() => {
      const url = new URL(window.location.href);
      if (query) {
        url.searchParams.set('search', query);
      } else {
        url.searchParams.delete('search');
      }
      window.location.href = url.toString();
    }, 500);
  });

  // Add note button
  const addNoteBtn = document.getElementById('add-note-btn');
  addNoteBtn?.addEventListener('click', () => {
    window.location.href = '/notes/new';
  });

  // Initialize sidebar state on mobile
  if (window.innerWidth < 1024) {
    sidebar?.classList.add('-translate-x-full');
  }
</script>