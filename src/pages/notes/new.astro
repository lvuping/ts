---
import Layout from '../../layouts/Layout.astro';
import '../../styles/globals.css';
import { getAllCategories } from '../../lib/notes';
import DiffViewer from '../../components/DiffViewer.astro';

const categories = await getAllCategories();
---

<Layout title="Add New Note">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <div class="mb-8 flex justify-between items-center">
        <a href="/" class="text-primary hover:text-primary/80 flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m15 18-6-6 6-6"/>
          </svg>
          Back to PKM
        </a>
        <button
          id="theme-toggle"
          class="p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
          aria-label="Toggle theme"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-600 dark:text-gray-400">
            <circle cx="12" cy="12" r="5"/>
            <line x1="12" y1="1" x2="12" y2="3"/>
            <line x1="12" y1="21" x2="12" y2="23"/>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
            <line x1="1" y1="12" x2="3" y2="12"/>
            <line x1="21" y1="12" x2="23" y2="12"/>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
          </svg>
        </button>
      </div>

      <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Add New Note</h1>
        </div>

        <form id="note-form" class="p-6 space-y-6">
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Title
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Enter note title"
            />
          </div>

          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Category
            </label>
            <select
              id="category"
              name="category"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Select a category</option>
              {categories.map((category) => (
                <option value={category}>{category}</option>
              ))}
            </select>
          </div>

          <div>
            <label for="language" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Language
            </label>
            <select
              id="language"
              name="language"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Select a language</option>
              <option value="javascript">JavaScript</option>
              <option value="typescript">TypeScript</option>
              <option value="python">Python</option>
              <option value="abap">ABAP</option>
              <option value="sql">SQL</option>
              <option value="html">HTML</option>
              <option value="css">CSS</option>
              <option value="bash">Bash</option>
              <option value="json">JSON</option>
              <option value="text">Plain Text</option>
            </select>
          </div>

          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Tags
            </label>
            <input
              type="text"
              id="tags"
              name="tags"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Enter tags separated by commas (e.g., api, async, database)"
            />
          </div>

          <div>
            <div class="flex justify-between items-center mb-2">
              <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Code Content
              </label>
              <button
                type="button"
                id="llm-assist"
                class="inline-flex items-center px-3 py-1 text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
                title="Ask AI for help"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                  <path d="M12 2a10 10 0 1 0 10 10H12V2z"/>
                  <path d="M12 2a10 10 0 0 1 10 10"/>
                  <path d="M12 12h.01"/>
                </svg>
                AI Assist
              </button>
            </div>
            <textarea
              id="content"
              name="content"
              rows="15"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm"
              placeholder="Paste your code here..."
            ></textarea>
            <div id="llm-prompt-container" class="hidden mt-2">
              <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3">
                <textarea
                  id="llm-prompt"
                  rows="3"
                  placeholder="Describe what you want to do with this code (e.g., 'add error handling', 'optimize performance', 'explain this function')"
                  class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                ></textarea>
                <div class="mt-2 flex gap-2">
                  <button
                    type="button"
                    id="llm-submit"
                    class="px-3 py-1 bg-primary text-primary-foreground hover:bg-primary/90 rounded-md text-sm font-medium transition-colors"
                  >
                    Generate
                  </button>
                  <button
                    type="button"
                    id="llm-cancel"
                    class="px-3 py-1 bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md text-sm font-medium transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </div>
              <div id="llm-diff-container" class="hidden mt-3"></div>
            </div>
          </div>

          <div class="flex gap-4">
            <button
              type="submit"
              class="px-4 py-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-md font-medium transition-colors"
            >
              Save Note
            </button>
            <a
              href="/"
              class="px-4 py-2 bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md font-medium transition-colors"
            >
              Cancel
            </a>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const html = document.documentElement;
  
  themeToggle?.addEventListener('click', () => {
    const isDark = html.classList.toggle('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });

  // Check for template from sessionStorage
  const templateData = sessionStorage.getItem('selectedTemplate');
  if (templateData) {
    const template = JSON.parse(templateData);
    
    // Pre-fill form with template data
    const titleInput = document.getElementById('title') as HTMLInputElement;
    const categorySelect = document.getElementById('category') as HTMLSelectElement;
    const languageSelect = document.getElementById('language') as HTMLSelectElement;
    const tagsInput = document.getElementById('tags') as HTMLInputElement;
    const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
    
    if (titleInput) titleInput.value = template.name + ' - Copy';
    if (categorySelect) categorySelect.value = template.category;
    if (languageSelect) languageSelect.value = template.language;
    if (tagsInput) tagsInput.value = template.tags.join(', ');
    if (contentTextarea) contentTextarea.value = template.content;
    
    // Clear template from sessionStorage
    sessionStorage.removeItem('selectedTemplate');
  }

  const form = document.getElementById('note-form') as HTMLFormElement;
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const tags = formData.get('tags') as string;
    
    const noteData = {
      title: formData.get('title'),
      category: formData.get('category'),
      language: formData.get('language'),
      content: formData.get('content'),
      tags: tags ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : []
    };
    
    try {
      const response = await fetch('/api/notes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(noteData)
      });
      
      if (response.ok) {
        window.location.href = '/';
      } else {
        alert('Failed to save note. Please try again.');
      }
    } catch (error) {
      alert('An error occurred. Please try again.');
    }
  });

  // LLM Assist functionality
  const llmAssistBtn = document.getElementById('llm-assist');
  const llmPromptContainer = document.getElementById('llm-prompt-container');
  const llmPromptInput = document.getElementById('llm-prompt') as HTMLTextAreaElement;
  const llmSubmitBtn = document.getElementById('llm-submit');
  const llmCancelBtn = document.getElementById('llm-cancel');
  const llmDiffContainer = document.getElementById('llm-diff-container');
  const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
  
  let lastAIResponse = '';
  
  llmAssistBtn?.addEventListener('click', () => {
    llmPromptContainer?.classList.remove('hidden');
    llmPromptInput?.focus();
  });
  
  llmCancelBtn?.addEventListener('click', () => {
    llmPromptContainer?.classList.add('hidden');
    llmPromptInput.value = '';
    llmDiffContainer?.classList.add('hidden');
    if (llmDiffContainer) {
      llmDiffContainer.innerHTML = '';
    }
    lastAIResponse = '';
  });
  
  llmSubmitBtn?.addEventListener('click', async () => {
    const prompt = llmPromptInput?.value.trim();
    if (!prompt) {
      alert('Please enter a prompt for AI assistance.');
      return;
    }
    
    // Show loading state
    const originalText = llmSubmitBtn.textContent;
    llmSubmitBtn.textContent = 'Generating...';
    llmSubmitBtn.setAttribute('disabled', 'true');
    
    try {
      const response = await fetch('/api/llm/assist', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          prompt: prompt,
          context: contentTextarea?.value || '',
          language: (document.getElementById('language') as HTMLSelectElement).value
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        lastAIResponse = data.response;
        
        // Create and show diff viewer
        const diffViewerHtml = `
          <div class="diff-viewer" data-original="${contentTextarea?.value.replace(/"/g, '&quot;') || ''}" data-generated="${lastAIResponse.replace(/"/g, '&quot;')}" data-language="${(document.getElementById('language') as HTMLSelectElement).value}">
            <div class="diff-header flex justify-between items-center bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded-t-md">
              <div class="flex gap-4">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Original</span>
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Generated</span>
              </div>
              <div class="flex gap-2">
                <button
                  type="button"
                  class="apply-btn px-3 py-1 bg-green-600 text-white hover:bg-green-700 rounded-md text-sm font-medium transition-colors"
                >
                  Apply Changes
                </button>
                <button
                  type="button"
                  class="regenerate-btn px-3 py-1 bg-blue-600 text-white hover:bg-blue-700 rounded-md text-sm font-medium transition-colors"
                >
                  Regenerate
                </button>
                <button
                  type="button"
                  class="cancel-diff-btn px-3 py-1 bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md text-sm font-medium transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
            <div class="diff-container flex gap-4 p-4 bg-gray-50 dark:bg-gray-900 rounded-b-md">
              <div class="diff-pane original-pane flex-1 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 p-3 overflow-auto max-h-96">
                <pre class="text-sm font-mono whitespace-pre-wrap">${contentTextarea?.value || ''}</pre>
              </div>
              <div class="diff-pane generated-pane flex-1 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 p-3 overflow-auto max-h-96">
                <pre class="text-sm font-mono whitespace-pre-wrap">${lastAIResponse}</pre>
              </div>
            </div>
          </div>
        `;
        
        if (llmDiffContainer) {
          llmDiffContainer.innerHTML = diffViewerHtml;
        }
        llmDiffContainer?.classList.remove('hidden');
        
        // Initialize the diff viewer
        const diffViewer = llmDiffContainer?.querySelector('.diff-viewer');
        if (diffViewer) {
          highlightDifferences(diffViewer as HTMLElement);
          
          // Add event listeners
          const applyBtn = diffViewer.querySelector('.apply-btn');
          const regenerateBtn = diffViewer.querySelector('.regenerate-btn');
          const cancelDiffBtn = diffViewer.querySelector('.cancel-diff-btn');
          
          applyBtn?.addEventListener('click', () => {
            contentTextarea.value = lastAIResponse;
            llmPromptContainer?.classList.add('hidden');
            llmPromptInput.value = '';
            llmDiffContainer?.classList.add('hidden');
            if (llmDiffContainer) {
      llmDiffContainer.innerHTML = '';
    }
            lastAIResponse = '';
          });
          
          regenerateBtn?.addEventListener('click', () => {
            llmSubmitBtn?.click();
          });
          
          cancelDiffBtn?.addEventListener('click', () => {
            llmDiffContainer?.classList.add('hidden');
            if (llmDiffContainer) {
      llmDiffContainer.innerHTML = '';
    }
            lastAIResponse = '';
          });
        }
      } else {
        alert(data.error || 'Failed to get AI response.');
      }
    } catch (error) {
      alert('An error occurred while getting AI assistance.');
    } finally {
      // Restore button state
      llmSubmitBtn.textContent = originalText;
      llmSubmitBtn.removeAttribute('disabled');
    }
  });
  
  // Diff highlighting function
  function computeLineDiff(original: string, generated: string) {
    const originalLines = original.split('\n');
    const generatedLines = generated.split('\n');
    
    const maxLines = Math.max(originalLines.length, generatedLines.length);
    const diffResult = {
      original: [] as Array<{line: string, type: 'unchanged' | 'removed' | 'modified'}>,
      generated: [] as Array<{line: string, type: 'unchanged' | 'added' | 'modified'}>
    };
    
    for (let i = 0; i < maxLines; i++) {
      const origLine = originalLines[i] || '';
      const genLine = generatedLines[i] || '';
      
      if (origLine === genLine) {
        diffResult.original.push({ line: origLine, type: 'unchanged' });
        diffResult.generated.push({ line: genLine, type: 'unchanged' });
      } else if (i >= originalLines.length) {
        diffResult.generated.push({ line: genLine, type: 'added' });
      } else if (i >= generatedLines.length) {
        diffResult.original.push({ line: origLine, type: 'removed' });
      } else {
        diffResult.original.push({ line: origLine, type: 'modified' });
        diffResult.generated.push({ line: genLine, type: 'modified' });
      }
    }
    
    return diffResult;
  }

  function highlightDifferences(viewer: HTMLElement) {
    const original = viewer.dataset.original || '';
    const generated = viewer.dataset.generated || '';
    
    const diff = computeLineDiff(original, generated);
    
    const originalPane = viewer.querySelector('.original-pane pre');
    const generatedPane = viewer.querySelector('.generated-pane pre');
    
    if (originalPane && generatedPane) {
      originalPane.innerHTML = diff.original.map(item => {
        const escapedLine = item.line
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;');
        
        if (item.type === 'removed') {
          return `<span class="diff-line-removed inline-block w-full">${escapedLine || ' '}</span>`;
        } else if (item.type === 'modified') {
          return `<span class="diff-line-modified inline-block w-full">${escapedLine || ' '}</span>`;
        }
        return escapedLine || ' ';
      }).join('\n');
      
      generatedPane.innerHTML = diff.generated.map(item => {
        const escapedLine = item.line
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;');
        
        if (item.type === 'added') {
          return `<span class="diff-line-added inline-block w-full">${escapedLine || ' '}</span>`;
        } else if (item.type === 'modified') {
          return `<span class="diff-line-modified inline-block w-full">${escapedLine || ' '}</span>`;
        }
        return escapedLine || ' ';
      }).join('\n');
    }
  }
  
  // Allow Ctrl+Enter to submit prompt
  llmPromptInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      llmSubmitBtn?.click();
    }
  });
</script>