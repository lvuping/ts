---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/globals.css';
import { getNoteById, getAllCategories } from '../../../lib/notes';

const { id } = Astro.params;
const note = await getNoteById(id!);
const categories = await getAllCategories();

if (!note) {
  return Astro.redirect('/');
}
---

<Layout title={`Edit: ${note.title}`}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <div class="mb-8 flex justify-between items-center">
        <a href="/" class="text-primary hover:text-primary/80 flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m15 18-6-6 6-6"/>
          </svg>
          Back to Notes
        </a>
        <button
          id="delete-btn"
          class="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 flex items-center gap-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M3 6h18m-2 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
          </svg>
          Delete Note
        </button>
      </div>

      <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Edit Note</h1>
        </div>

        <form id="note-form" class="p-6 space-y-6">
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Title
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              value={note.title}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Enter note title"
            />
          </div>

          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Category
            </label>
            <select
              id="category"
              name="category"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Select a category</option>
              {categories.map((category) => (
                <option value={category} selected={category === note.category}>{category}</option>
              ))}
            </select>
          </div>

          <div>
            <label for="language" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Language
            </label>
            <select
              id="language"
              name="language"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Select a language</option>
              <option value="javascript" selected={note.language === 'javascript'}>JavaScript</option>
              <option value="typescript" selected={note.language === 'typescript'}>TypeScript</option>
              <option value="python" selected={note.language === 'python'}>Python</option>
              <option value="abap" selected={note.language === 'abap'}>ABAP</option>
              <option value="sql" selected={note.language === 'sql'}>SQL</option>
              <option value="html" selected={note.language === 'html'}>HTML</option>
              <option value="css" selected={note.language === 'css'}>CSS</option>
              <option value="bash" selected={note.language === 'bash'}>Bash</option>
              <option value="json" selected={note.language === 'json'}>JSON</option>
              <option value="text" selected={note.language === 'text'}>Plain Text</option>
            </select>
          </div>

          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Tags
            </label>
            <input
              type="text"
              id="tags"
              name="tags"
              value={note.tags.join(', ')}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Enter tags separated by commas (e.g., api, async, database)"
            />
          </div>

          <div>
            <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Code Content
            </label>
            <textarea
              id="content"
              name="content"
              rows="15"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm"
              placeholder="Paste your code here..."
            >{note.content}</textarea>
          </div>

          <div class="flex gap-4">
            <button
              type="submit"
              class="px-4 py-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-md font-medium transition-colors"
            >
              Update Note
            </button>
            <a
              href="/"
              class="px-4 py-2 bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md font-medium transition-colors"
            >
              Cancel
            </a>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ noteId: id }}>
  const form = document.getElementById('note-form') as HTMLFormElement;
  const deleteBtn = document.getElementById('delete-btn');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const tags = formData.get('tags') as string;
    
    const noteData = {
      title: formData.get('title'),
      category: formData.get('category'),
      language: formData.get('language'),
      content: formData.get('content'),
      tags: tags ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : []
    };
    
    try {
      const response = await fetch(`/api/notes/${noteId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(noteData)
      });
      
      if (response.ok) {
        window.location.href = '/';
      } else {
        alert('Failed to update note. Please try again.');
      }
    } catch (error) {
      alert('An error occurred. Please try again.');
    }
  });

  deleteBtn?.addEventListener('click', async () => {
    if (confirm('Are you sure you want to delete this note?')) {
      try {
        const response = await fetch(`/api/notes/${noteId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          window.location.href = '/';
        } else {
          alert('Failed to delete note. Please try again.');
        }
      } catch (error) {
        alert('An error occurred. Please try again.');
      }
    }
  });
</script>