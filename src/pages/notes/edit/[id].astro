---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/globals.css';
import { getNoteById, getAllCategories } from '../../../lib/notes';

const { id } = Astro.params;
const note = await getNoteById(id!);
const categories = await getAllCategories();

if (!note) {
  return Astro.redirect('/');
}
---

<Layout title={`Edit: ${note.title}`}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <div class="mb-8 flex justify-between items-center">
        <a href="/" class="text-primary hover:text-primary/80 flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m15 18-6-6 6-6"/>
          </svg>
          Back to PKM
        </a>
        <div class="flex items-center gap-4">
          <button
            id="theme-toggle"
            class="p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            aria-label="Toggle theme"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-600 dark:text-gray-400">
              <circle cx="12" cy="12" r="5"/>
              <line x1="12" y1="1" x2="12" y2="3"/>
              <line x1="12" y1="21" x2="12" y2="23"/>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
              <line x1="1" y1="12" x2="3" y2="12"/>
              <line x1="21" y1="12" x2="23" y2="12"/>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
            </svg>
          </button>
          <button
            id="delete-btn"
            class="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 flex items-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M3 6h18m-2 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
            </svg>
            Delete Note
          </button>
        </div>
      </div>

      <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Edit Note</h1>
        </div>

        <form id="note-form" class="p-6 space-y-6">
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Title
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              value={note.title}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Enter note title"
            />
          </div>

          <div>
            <div class="flex justify-between items-center mb-2">
              <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Code Content
              </label>
              <div class="flex gap-2">
                <button
                  type="button"
                  id="llm-assist"
                  class="inline-flex items-center px-3 py-1 text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
                  title="Ask AI for help"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                    <path d="M12 2a10 10 0 1 0 10 10H12V2z"/>
                    <path d="M12 2a10 10 0 0 1 10 10"/>
                    <path d="M12 12h.01"/>
                  </svg>
                  AI Assist
                </button>
                <button
                  type="button"
                  id="toggle-metadata"
                  class="inline-flex items-center px-3 py-1 text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
                  title="Toggle metadata"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                    <path d="M12 3v18m0-18l-3 3m3-3l3 3m-3 18l-3-3m3 3l3-3"/>
                  </svg>
                  Metadata
                </button>
              </div>
            </div>
            <textarea
              id="content"
              name="content"
              rows="20"
              required
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm"
              placeholder="Paste your code here..."
            >{note.content}</textarea>
            <div id="llm-prompt-container" class="hidden mt-2">
              <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3">
                <textarea
                  id="llm-prompt"
                  rows="3"
                  placeholder="Describe what you want to do with this code (e.g., 'add error handling', 'optimize performance', 'explain this function')"
                  class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                ></textarea>
                <div class="mt-2 flex gap-2">
                  <button
                    type="button"
                    id="llm-submit"
                    class="px-3 py-1 bg-primary text-primary-foreground hover:bg-primary/90 rounded-md text-sm font-medium transition-colors"
                  >
                    Generate
                  </button>
                  <button
                    type="button"
                    id="llm-replace"
                    class="px-3 py-1 bg-green-600 text-white hover:bg-green-700 rounded-md text-sm font-medium transition-colors hidden"
                  >
                    Replace Code
                  </button>
                  <button
                    type="button"
                    id="llm-append"
                    class="px-3 py-1 bg-blue-600 text-white hover:bg-blue-700 rounded-md text-sm font-medium transition-colors hidden"
                  >
                    Append to Code
                  </button>
                  <button
                    type="button"
                    id="llm-cancel"
                    class="px-3 py-1 bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md text-sm font-medium transition-colors"
                  >
                    Cancel
                  </button>
                </div>
                <div id="llm-response" class="hidden mt-3">
                  <div class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">AI Response:</div>
                  <pre id="llm-response-content" class="bg-gray-100 dark:bg-gray-800 p-3 rounded-md text-sm overflow-x-auto"></pre>
                </div>
              </div>
            </div>
          </div>

          <div id="metadata-section" class="hidden space-y-6 border-t border-gray-200 dark:border-gray-700 pt-6">
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Category
                </label>
                <select
                  id="category"
                  name="category"
                  required
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value="">Select a category</option>
                  {categories.map((category) => (
                    <option value={category} selected={category === note.category}>{category}</option>
                  ))}
                </select>
              </div>

              <div>
                <label for="language" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Language
                </label>
                <select
                  id="language"
                  name="language"
                  required
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value="">Select a language</option>
                  <option value="javascript" selected={note.language === 'javascript'}>JavaScript</option>
                  <option value="typescript" selected={note.language === 'typescript'}>TypeScript</option>
                  <option value="python" selected={note.language === 'python'}>Python</option>
                  <option value="abap" selected={note.language === 'abap'}>ABAP</option>
                  <option value="sql" selected={note.language === 'sql'}>SQL</option>
                  <option value="html" selected={note.language === 'html'}>HTML</option>
                  <option value="css" selected={note.language === 'css'}>CSS</option>
                  <option value="bash" selected={note.language === 'bash'}>Bash</option>
                  <option value="json" selected={note.language === 'json'}>JSON</option>
                  <option value="text" selected={note.language === 'text'}>Plain Text</option>
                </select>
              </div>
            </div>

            <div>
              <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Tags
              </label>
              <input
                type="text"
                id="tags"
                name="tags"
                value={note.tags.join(', ')}
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Enter tags separated by commas (e.g., api, async, database)"
              />
            </div>
          </div>

          <div class="flex gap-4">
            <button
              type="submit"
              class="px-4 py-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-md font-medium transition-colors"
            >
              Update Note
            </button>
            <a
              href="/"
              class="px-4 py-2 bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md font-medium transition-colors"
            >
              Cancel
            </a>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ noteId: id }} is:inline>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const html = document.documentElement;
  
  themeToggle?.addEventListener('click', () => {
    const isDark = html.classList.toggle('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });

  const form = document.getElementById('note-form');
  const deleteBtn = document.getElementById('delete-btn');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const tags = formData.get('tags');
    
    const noteData = {
      title: formData.get('title'),
      category: formData.get('category'),
      language: formData.get('language'),
      content: formData.get('content'),
      tags: tags ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : []
    };
    
    try {
      const response = await fetch(`/api/notes/${noteId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(noteData)
      });
      
      if (response.ok) {
        window.location.href = '/';
      } else {
        alert('Failed to update note. Please try again.');
      }
    } catch (error) {
      alert('An error occurred. Please try again.');
    }
  });

  deleteBtn?.addEventListener('click', async () => {
    if (confirm('Are you sure you want to delete this note?')) {
      try {
        const response = await fetch(`/api/notes/${noteId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          window.location.href = '/';
        } else {
          alert('Failed to delete note. Please try again.');
        }
      } catch (error) {
        alert('An error occurred. Please try again.');
      }
    }
  });

  // Toggle metadata section
  const toggleMetadataBtn = document.getElementById('toggle-metadata');
  const metadataSection = document.getElementById('metadata-section');
  
  toggleMetadataBtn?.addEventListener('click', () => {
    metadataSection?.classList.toggle('hidden');
  });

  // LLM Assist functionality
  const llmAssistBtn = document.getElementById('llm-assist');
  const llmPromptContainer = document.getElementById('llm-prompt-container');
  const llmPromptInput = document.getElementById('llm-prompt');
  const llmSubmitBtn = document.getElementById('llm-submit');
  const llmReplaceBtn = document.getElementById('llm-replace');
  const llmAppendBtn = document.getElementById('llm-append');
  const llmCancelBtn = document.getElementById('llm-cancel');
  const llmResponseDiv = document.getElementById('llm-response');
  const llmResponseContent = document.getElementById('llm-response-content');
  const contentTextarea = document.getElementById('content');
  
  let lastAIResponse = '';
  
  llmAssistBtn?.addEventListener('click', () => {
    llmPromptContainer?.classList.remove('hidden');
    llmPromptInput?.focus();
  });
  
  llmCancelBtn?.addEventListener('click', () => {
    llmPromptContainer?.classList.add('hidden');
    llmPromptInput.value = '';
    llmResponseDiv?.classList.add('hidden');
    llmReplaceBtn?.classList.add('hidden');
    llmAppendBtn?.classList.add('hidden');
    lastAIResponse = '';
  });
  
  llmSubmitBtn?.addEventListener('click', async () => {
    const prompt = llmPromptInput?.value.trim();
    if (!prompt) {
      alert('Please enter a prompt for AI assistance.');
      return;
    }
    
    // Show loading state
    const originalText = llmSubmitBtn.textContent;
    llmSubmitBtn.textContent = 'Generating...';
    llmSubmitBtn.setAttribute('disabled', 'true');
    
    try {
      const response = await fetch('/api/llm/assist', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          prompt: prompt,
          context: contentTextarea?.value || '',
          language: document.getElementById('language').value
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        lastAIResponse = data.response;
        
        // Show the response
        if (llmResponseContent) {
          llmResponseContent.textContent = lastAIResponse;
        }
        llmResponseDiv?.classList.remove('hidden');
        llmReplaceBtn?.classList.remove('hidden');
        llmAppendBtn?.classList.remove('hidden');
      } else {
        alert(data.error || 'Failed to get AI response.');
      }
    } catch (error) {
      alert('An error occurred while getting AI assistance.');
    } finally {
      // Restore button state
      llmSubmitBtn.textContent = originalText;
      llmSubmitBtn.removeAttribute('disabled');
    }
  });
  
  // Replace code button
  llmReplaceBtn?.addEventListener('click', () => {
    if (lastAIResponse) {
      contentTextarea.value = lastAIResponse;
      llmPromptContainer?.classList.add('hidden');
      llmPromptInput.value = '';
      llmResponseDiv?.classList.add('hidden');
      llmReplaceBtn?.classList.add('hidden');
      llmAppendBtn?.classList.add('hidden');
      lastAIResponse = '';
    }
  });
  
  // Append code button
  llmAppendBtn?.addEventListener('click', () => {
    if (lastAIResponse) {
      if (contentTextarea.value) {
        contentTextarea.value += '\n\n' + lastAIResponse;
      } else {
        contentTextarea.value = lastAIResponse;
      }
      llmPromptContainer?.classList.add('hidden');
      llmPromptInput.value = '';
      llmResponseDiv?.classList.add('hidden');
      llmReplaceBtn?.classList.add('hidden');
      llmAppendBtn?.classList.add('hidden');
      lastAIResponse = '';
    }
  });
  
  // Allow Ctrl+Enter to submit prompt
  llmPromptInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      llmSubmitBtn?.click();
    }
  });
</script>