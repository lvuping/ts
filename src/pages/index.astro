---
import Layout from '../layouts/Layout.astro';
import CodeSnippet from '../components/CodeSnippet.astro';
import Sidebar from '../components/Sidebar.astro';
import '../styles/globals.css';
import { getAllNotes, getNotesByCategory, getNotesByTag, searchNotes, getAllCategories, getAllTags } from '../lib/notes';
import type { Note } from '../types/note';

// Get query parameters
const url = new URL(Astro.request.url);
const selectedCategory = url.searchParams.get('category');
const selectedTag = url.searchParams.get('tag');
const searchQuery = url.searchParams.get('search');
const showFavorites = url.searchParams.get('favorites') === 'true';

// Fetch notes based on filters
let notes: Note[] = [];
if (searchQuery) {
  notes = await searchNotes(searchQuery);
} else if (selectedCategory) {
  notes = await getNotesByCategory(selectedCategory);
} else if (selectedTag) {
  notes = await getNotesByTag(selectedTag);
} else {
  notes = await getAllNotes();
}

// Filter favorites if needed
if (showFavorites) {
  notes = notes.filter(note => note.favorite === true);
}

// Get categories and tags for sidebar
const categories = await getAllCategories();
const tags = await getAllTags();

// Initialize with sample data if no notes exist
if (notes.length === 0 && !selectedCategory && !selectedTag && !searchQuery) {
  const { createNote } = await import('../lib/notes');
  
  // Create sample notes
  await createNote({
    title: "ABAP Select Statement",
    content: `DATA: lt_users TYPE TABLE OF usr02,
      ls_user TYPE usr02.

SELECT * FROM usr02
  INTO TABLE lt_users
  WHERE bname LIKE 'A%'
  AND gltgb >= sy-datum.

LOOP AT lt_users INTO ls_user.
  WRITE: / ls_user-bname, ls_user-ustyp.
ENDLOOP.`,
    language: "abap",
    category: "Backend",
    tags: ["database", "sap", "abap"]
  });

  await createNote({
    title: "JavaScript Async Function",
    content: `async function fetchUserData(userId) {
  try {
    const response = await fetch(\`/api/users/\${userId}\`);
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching user data:', error);
    return null;
  }
}

// Usage
const user = await fetchUserData(123);
console.log(user);`,
    language: "javascript",
    category: "Frontend",
    tags: ["async", "api", "javascript"]
  });

  await createNote({
    title: "Python Data Processing",
    content: `import pandas as pd
import numpy as np

def process_sales_data(file_path):
    """Process sales data and return summary statistics"""
    # Read CSV file
    df = pd.read_csv(file_path)
    
    # Clean data
    df['date'] = pd.to_datetime(df['date'])
    df['amount'] = pd.to_numeric(df['amount'], errors='coerce')
    df = df.dropna()
    
    # Calculate statistics
    summary = {
        'total_sales': df['amount'].sum(),
        'average_sale': df['amount'].mean(),
        'top_product': df.groupby('product')['amount'].sum().idxmax(),
        'daily_average': df.groupby(df['date'].dt.date)['amount'].sum().mean()
    }
    
    return summary

# Example usage
results = process_sales_data('sales_data.csv')
print(f"Total Sales: ${'{'}results['total_sales']:,.2f{'}'}")`,
    language: "python",
    category: "Backend",
    tags: ["pandas", "data-processing", "python"]
  });

  // Refresh notes after creating samples
  notes = await getAllNotes();
}
---

<Layout title="PKM">
  <div class="flex min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Sidebar -->
    <Sidebar 
      categories={categories} 
      tags={tags} 
      selectedCategory={selectedCategory || undefined} 
      selectedTag={selectedTag || undefined}
      searchQuery={searchQuery || undefined}
    />

    <!-- Main Content -->
    <div class="flex-1 lg:ml-64">
      <header class="bg-white dark:bg-gray-800 shadow">
        <div class="px-4 sm:px-6 lg:px-8 py-6 flex justify-between items-center">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
              {showFavorites ? 'Favorite Notes' :
               selectedCategory ? `Category: ${selectedCategory}` : 
               selectedTag ? `Tag: #${selectedTag}` :
               searchQuery ? `Search: "${searchQuery}"` :
               'All Notes'}
            </h1>
            <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
              {notes.length} {notes.length === 1 ? 'note' : 'notes'} found
            </p>
          </div>
          <div class="flex items-center gap-2">
            <!-- View mode selector -->
            <div class="flex rounded-lg bg-gray-100 dark:bg-gray-700 p-1">
              <button
                id="view-detailed"
                class="view-mode-btn px-3 py-1.5 rounded text-sm font-medium transition-colors bg-white dark:bg-gray-600 text-gray-800 dark:text-gray-200"
                data-view="detailed"
                title="Detailed view"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <line x1="9" y1="9" x2="15" y2="9"></line>
                  <line x1="9" y1="13" x2="15" y2="13"></line>
                  <line x1="9" y1="17" x2="15" y2="17"></line>
                </svg>
              </button>
              <button
                id="view-card"
                class="view-mode-btn px-3 py-1.5 rounded text-sm font-medium transition-colors text-gray-600 dark:text-gray-400"
                data-view="card"
                title="Card view"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="3" y="3" width="7" height="7"></rect>
                  <rect x="14" y="3" width="7" height="7"></rect>
                  <rect x="14" y="14" width="7" height="7"></rect>
                  <rect x="3" y="14" width="7" height="7"></rect>
                </svg>
              </button>
              <button
                id="view-compact"
                class="view-mode-btn px-3 py-1.5 rounded text-sm font-medium transition-colors text-gray-600 dark:text-gray-400"
                data-view="compact"
                title="Compact view"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <line x1="8" y1="6" x2="21" y2="6"></line>
                  <line x1="8" y1="12" x2="21" y2="12"></line>
                  <line x1="8" y1="18" x2="21" y2="18"></line>
                  <line x1="3" y1="6" x2="3.01" y2="6"></line>
                  <line x1="3" y1="12" x2="3.01" y2="12"></line>
                  <line x1="3" y1="18" x2="3.01" y2="18"></line>
                </svg>
              </button>
            </div>
            <button
              id="import-btn"
              class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              title="Import markdown files"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="17 8 12 3 7 8"/>
                <line x1="12" y1="3" x2="12" y2="15"/>
              </svg>
            </button>
            <button
              id="export-btn"
              class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              title="Export notes"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          <button
            id="theme-toggle"
            class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
            aria-label="Toggle theme"
          >
            <svg class="w-6 h-6 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>
            </svg>
            <svg class="w-6 h-6 block dark:hidden" fill="currentColor" viewBox="0 0 20 20">
              <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
            </svg>
          </button>
        </div>
      </header>

      <main class="px-4 sm:px-6 lg:px-8 py-8">
        {notes.length === 0 ? (
          <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">No entries found</h3>
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
              {searchQuery || selectedCategory || selectedTag ? 
                'Try adjusting your filters or search query.' :
                'Get started by creating a new note.'}
            </p>
          </div>
        ) : (
          <>
            <!-- Detailed View (default) -->
            <div id="detailed-view" class="grid gap-6">
              {notes.map((note) => (
                <div class="relative group p-6 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md hover:border-gray-300 dark:hover:border-gray-600 transition-all duration-200" data-note-id={note.id}>
                  <CodeSnippet
                    title={note.title}
                    code={note.content}
                    lang={note.language}
                  />
                  <div class="mt-3 flex flex-wrap items-center gap-2">
                  <button
                    data-favorite-id={note.id}
                    class={`inline-flex items-center px-2 py-1 text-xs font-medium rounded transition-colors ${
                      note.favorite ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-400 dark:text-gray-500 hover:text-yellow-600 dark:hover:text-yellow-400'
                    }`}
                    title={note.favorite ? 'Remove from favorites' : 'Add to favorites'}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill={note.favorite ? 'currentColor' : 'none'} stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                    </svg>
                  </button>
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    {note.category}
                  </span>
                  {note.tags.map((tag) => (
                    <a
                      href={`/?tag=${encodeURIComponent(tag)}`}
                      class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                    >
                      #{tag}
                    </a>
                  ))}
                  <span class="text-xs text-gray-500 dark:text-gray-400 ml-auto">
                    {new Date(note.updatedAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                  </span>
                  <div class="flex gap-1">
                    <a
                      href={`/notes/edit/${note.id}`}
                      class="inline-flex items-center px-2 py-1 text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
                      title="Edit note"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                      </svg>
                      Edit
                    </a>
                    <button
                      data-delete-id={note.id}
                      class="inline-flex items-center px-2 py-1 text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors"
                      title="Delete note"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                        <path d="M3 6h18m-2 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                      </svg>
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <!-- Card View -->
          <div id="card-view" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {notes.map((note) => (
              <div class="relative group bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow border border-gray-200 dark:border-gray-700 overflow-hidden" data-note-id={note.id}>
                <div class="p-6">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">{note.title}</h3>
                  <div class="mb-3">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                      {note.category}
                    </span>
                    <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">{note.language}</span>
                  </div>
                  <div class="text-sm text-gray-600 dark:text-gray-400 mb-3 overflow-hidden" style="max-height: 100px;">
                    <pre class="whitespace-pre-wrap font-mono text-xs">{note.content.substring(0, 150)}{note.content.length > 150 ? '...' : ''}</pre>
                  </div>
                  <div class="flex flex-wrap gap-1 mb-3">
                    {note.tags.slice(0, 3).map((tag) => (
                      <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300">
                        #{tag}
                      </span>
                    ))}
                    {note.tags.length > 3 && (
                      <span class="text-xs text-gray-500 dark:text-gray-400">+{note.tags.length - 3}</span>
                    )}
                  </div>
                  <div class="flex items-center justify-between">
                    <span class="text-xs text-gray-500 dark:text-gray-400">
                      {new Date(note.updatedAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                    </span>
                    <div class="flex gap-1">
                      <button
                        data-favorite-id={note.id}
                        class={`p-1 rounded transition-colors ${
                          note.favorite ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-400 dark:text-gray-500 hover:text-yellow-600 dark:hover:text-yellow-400'
                        }`}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill={note.favorite ? 'currentColor' : 'none'} stroke="currentColor" stroke-width="2">
                          <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                        </svg>
                      </button>
                      <a
                        href={`/notes/edit/${note.id}`}
                        class="p-1 rounded text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                        </svg>
                      </a>
                      <button
                        data-delete-id={note.id}
                        class="p-1 rounded text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M3 6h18m-2 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <!-- Compact View -->
          <div id="compact-view" class="hidden">
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden">
              <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Title</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Category</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Language</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Tags</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Updated</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  {notes.map((note) => (
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" data-note-id={note.id}>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <button
                            data-favorite-id={note.id}
                            class={`mr-2 ${
                              note.favorite ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-400 dark:text-gray-500 hover:text-yellow-600 dark:hover:text-yellow-400'
                            }`}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill={note.favorite ? 'currentColor' : 'none'} stroke="currentColor" stroke-width="2">
                              <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                            </svg>
                          </button>
                          <a href={`/notes/edit/${note.id}`} class="text-sm font-medium text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400">
                            {note.title}
                          </a>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                          {note.category}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {note.language}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex flex-wrap gap-1">
                          {note.tags.slice(0, 2).map((tag) => (
                            <a
                              href={`/?tag=${encodeURIComponent(tag)}`}
                              class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                            >
                              #{tag}
                            </a>
                          ))}
                          {note.tags.length > 2 && (
                            <span class="text-xs text-gray-500 dark:text-gray-400">+{note.tags.length - 2}</span>
                          )}
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {new Date(note.updatedAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <div class="flex gap-2">
                          <a
                            href={`/notes/edit/${note.id}`}
                            class="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                            </svg>
                          </a>
                          <button
                            data-delete-id={note.id}
                            class="text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M3 6h18m-2 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
          </>
        )}
      </main>

    <!-- Import Modal -->
    <div id="import-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-2xl shadow-lg rounded-lg bg-white dark:bg-gray-800">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Import Notes from Markdown</h3>
          
          <div class="mb-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <h4 class="font-medium text-gray-900 dark:text-white mb-2">Instructions:</h4>
            <ol class="list-decimal list-inside space-y-1 text-sm text-gray-600 dark:text-gray-300">
              <li>Select a markdown file (.md or .markdown)</li>
              <li>Each note should be separated by horizontal rules (---)</li>
              <li>The first heading (#) becomes the note title</li>
              <li>Include metadata for Category and Tags</li>
              <li>Code blocks should specify the language</li>
            </ol>
          </div>
          
          <div class="mb-4">
            <h4 class="font-medium text-gray-900 dark:text-white mb-2">Example Format:</h4>
            <pre class="p-3 bg-gray-100 dark:bg-gray-900 rounded text-xs overflow-x-auto"><code># My Python Function

**Category:** Backend
**Tags:** #python, #functions

```python
def hello_world():
    return "Hello, World!"
```

---

# React Component

**Category:** Frontend
**Tags:** #react, #javascript

```javascript
const MyComponent = () => {
  return &lt;div&gt;Hello&lt;/div&gt;;
};
```</code></pre>
          </div>
          
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Choose file to import:
            </label>
            <input
              type="file"
              id="import-file-input"
              accept=".md,.markdown"
              class="block w-full text-sm text-gray-900 dark:text-gray-100 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer bg-gray-50 dark:bg-gray-700 focus:outline-none"
            />
          </div>
          
          <div class="mt-6 flex justify-end gap-3">
            <button
              id="import-cancel"
              class="px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors"
            >
              Cancel
            </button>
            <button
              id="import-confirm"
              class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Import
            </button>
          </div>
        </div>
      </div>
    </div>

    <footer class="bg-white dark:bg-gray-800 shadow mt-12">
      <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
        <p class="text-center text-sm text-gray-500 dark:text-gray-400">
          PKM - Personal Knowledge Management with syntax highlighting
        </p>
      </div>
    </footer>
  </div>
</Layout>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const html = document.documentElement;
  
  // Check for saved theme preference or default to light
  const currentTheme = localStorage.getItem('theme') || 'light';
  html.classList.toggle('dark', currentTheme === 'dark');
  
  themeToggle?.addEventListener('click', () => {
    const isDark = html.classList.toggle('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });

  // View mode functionality
  const viewButtons = document.querySelectorAll('.view-mode-btn');
  const views = {
    detailed: document.getElementById('detailed-view'),
    card: document.getElementById('card-view'),
    compact: document.getElementById('compact-view')
  };
  
  // Check for saved view preference or default to detailed
  const currentView = localStorage.getItem('viewMode') || 'detailed';
  
  // Apply saved view
  function setView(viewMode: string) {
    // Hide all views
    Object.values(views).forEach(view => view?.classList.add('hidden'));
    
    // Show selected view
    const selectedView = views[viewMode as keyof typeof views];
    selectedView?.classList.remove('hidden');
    
    // Update button styles
    viewButtons.forEach(btn => {
      const btnView = btn.getAttribute('data-view');
      if (btnView === viewMode) {
        btn.classList.add('bg-white', 'dark:bg-gray-600', 'text-gray-800', 'dark:text-gray-200');
        btn.classList.remove('text-gray-600', 'dark:text-gray-400');
      } else {
        btn.classList.remove('bg-white', 'dark:bg-gray-600', 'text-gray-800', 'dark:text-gray-200');
        btn.classList.add('text-gray-600', 'dark:text-gray-400');
      }
    });
    
    // Save preference
    localStorage.setItem('viewMode', viewMode);
  }
  
  // Apply saved view on load
  setView(currentView);
  
  // Add click handlers to view buttons
  viewButtons.forEach(button => {
    button.addEventListener('click', () => {
      const viewMode = button.getAttribute('data-view');
      if (viewMode) {
        setView(viewMode);
      }
    });
  });

  // Delete functionality
  document.querySelectorAll('[data-delete-id]').forEach(button => {
    button.addEventListener('click', async (e) => {
      const noteId = (e.currentTarget as HTMLElement).getAttribute('data-delete-id');
      
      if (confirm('Are you sure you want to delete this note?')) {
        try {
          const response = await fetch(`/api/notes/${noteId}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Failed to delete note. Please try again.');
          }
        } catch (error) {
          alert('An error occurred. Please try again.');
        }
      }
    });
  });

  // Favorite functionality
  document.querySelectorAll('[data-favorite-id]').forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const btn = e.currentTarget as HTMLElement;
      const noteId = btn.getAttribute('data-favorite-id');
      
      // Disable button during request
      btn.style.pointerEvents = 'none';
      
      try {
        const response = await fetch(`/api/notes/${noteId}/favorite`, {
          method: 'POST'
        });
        
        if (response.ok) {
          const updatedNote = await response.json();
          
          // Update all favorite buttons for this note
          document.querySelectorAll(`[data-favorite-id="${noteId}"]`).forEach(favoriteBtn => {
            const svg = favoriteBtn.querySelector('svg');
            if (svg) {
              svg.setAttribute('fill', updatedNote.favorite ? 'currentColor' : 'none');
            }
            
            // Update button classes
            if (updatedNote.favorite) {
              favoriteBtn.classList.remove('text-gray-400', 'dark:text-gray-500', 'hover:text-yellow-600', 'dark:hover:text-yellow-400');
              favoriteBtn.classList.add('text-yellow-600', 'dark:text-yellow-400');
            } else {
              favoriteBtn.classList.remove('text-yellow-600', 'dark:text-yellow-400');
              favoriteBtn.classList.add('text-gray-400', 'dark:text-gray-500', 'hover:text-yellow-600', 'dark:hover:text-yellow-400');
            }
            
            // Update title
            favoriteBtn.setAttribute('title', updatedNote.favorite ? 'Remove from favorites' : 'Add to favorites');
          });
          
          // If we're on the favorites page and unfavoriting, remove the item
          const urlParams = new URLSearchParams(window.location.search);
          if (urlParams.get('favorites') === 'true' && !updatedNote.favorite) {
            // Find and remove all instances of this note from all views
            const noteElements = document.querySelectorAll(`[data-note-id="${noteId}"]`);
            noteElements.forEach(el => {
              const parent = el.closest('.group') || el.closest('tr') || el.closest('[class*="rounded-lg"]');
              if (parent) {
                parent.remove();
              }
            });
            
            // Update the count
            const countElement = document.querySelector('.text-sm.text-gray-600.dark\\:text-gray-400');
            if (countElement) {
              const currentCount = parseInt(countElement.textContent?.match(/\d+/)?.[0] || '0');
              const newCount = Math.max(0, currentCount - 1);
              countElement.textContent = `${newCount} ${newCount === 1 ? 'note' : 'notes'} found`;
            }
          }
        } else {
          alert('Failed to update favorite status.');
        }
      } catch (error) {
        alert('An error occurred. Please try again.');
      } finally {
        // Re-enable button
        btn.style.pointerEvents = '';
      }
    });
  });

  // Export functionality
  const exportBtn = document.getElementById('export-btn');
  exportBtn?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/notes');
      const notes = await response.json();
      
      // Create markdown content
      const markdown = notes.map((note: any) => {
        return `# ${note.title}

**Category:** ${note.category}  
**Tags:** ${note.tags.map((tag: any) => `#${tag}`).join(', ')}  
**Updated:** ${new Date(note.updatedAt).toLocaleDateString()}  

\`\`\`${note.language}
${note.content}
\`\`\`

---

`;
      }).join('\n');
      
      // Download markdown file
      const blob = new Blob([markdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `pkm-export-${new Date().toISOString().split('T')[0]}.md`;
      a.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      alert('Failed to export notes.');
    }
  });

  // Import functionality
  const importBtn = document.getElementById('import-btn');
  const importModal = document.getElementById('import-modal');
  const importFileInput = document.getElementById('import-file-input') as HTMLInputElement;
  const importConfirmBtn = document.getElementById('import-confirm');
  const importCancelBtn = document.getElementById('import-cancel');
  
  // Open import modal
  importBtn?.addEventListener('click', () => {
    importModal?.classList.remove('hidden');
    if (importFileInput) {
      importFileInput.value = ''; // Reset file input
    }
  });
  
  // Close import modal
  importCancelBtn?.addEventListener('click', () => {
    importModal?.classList.add('hidden');
  });
  
  // Close modal when clicking outside
  importModal?.addEventListener('click', (e) => {
    if (e.target === importModal) {
      importModal.classList.add('hidden');
    }
  });
  
  // Handle import confirmation
  importConfirmBtn?.addEventListener('click', async () => {
    const file = importFileInput?.files?.[0];
    if (!file) {
      alert('Please select a file to import');
      return;
    }
    
    // Show loading state
    if (importConfirmBtn) {
      importConfirmBtn.textContent = 'Importing...';
      importConfirmBtn.setAttribute('disabled', 'true');
    }
    
    const reader = new FileReader();
    reader.onload = async (e) => {
      const markdown = e.target?.result as string;
      
      try {
        const response = await fetch('/api/notes/import', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ markdown })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Show success message in modal
          const modalContent = importModal?.querySelector('.mt-3');
          if (modalContent) {
            modalContent.innerHTML = `
              <div class="text-center py-8">
                <svg class="mx-auto h-12 w-12 text-green-600 dark:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                <h3 class="mt-4 text-lg font-medium text-gray-900 dark:text-white">Import Successful!</h3>
                <p class="mt-2 text-gray-600 dark:text-gray-300">Successfully imported ${data.count} note${data.count !== 1 ? 's' : ''}</p>
                <button
                  onclick="window.location.reload()"
                  class="mt-6 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  View Notes
                </button>
              </div>
            `;
          }
        } else {
          alert(data.error || 'Failed to import notes');
          // Reset button state
          if (importConfirmBtn) {
            importConfirmBtn.textContent = 'Import';
            importConfirmBtn.removeAttribute('disabled');
          }
        }
      } catch (error) {
        alert('An error occurred during import');
        // Reset button state
        if (importConfirmBtn) {
          importConfirmBtn.textContent = 'Import';
          importConfirmBtn.removeAttribute('disabled');
        }
      }
    };
    reader.readAsText(file);
  });

  // Bulk selection functionality
  const bulkSelectToggle = document.getElementById('bulk-select-toggle');
  const bulkActions = document.getElementById('bulk-actions');
  const selectedCountSpan = document.getElementById('selected-count');
  const bulkDeleteBtn = document.getElementById('bulk-delete');
  const bulkExportBtn = document.getElementById('bulk-export');
  const bulkCancelBtn = document.getElementById('bulk-cancel');
  let bulkSelectMode = false;
  
  // Show bulk select button only if there are notes
  if (document.querySelectorAll('[data-note-id]').length > 0) {
    bulkSelectToggle?.classList.remove('hidden');
  }
  
  bulkSelectToggle?.addEventListener('click', () => {
    // bulkSelectMode = true;
    bulkActions?.classList.remove('hidden');
    document.querySelectorAll('.bulk-select-checkbox').forEach(cb => {
      cb.classList.remove('hidden');
    });
  });
  
  bulkCancelBtn?.addEventListener('click', () => {
    // bulkSelectMode = false;
    bulkActions?.classList.add('hidden');
    document.querySelectorAll('.bulk-select-checkbox').forEach(cb => {
      cb.classList.add('hidden');
      (cb as HTMLInputElement).checked = false;
    });
    updateSelectedCount();
  });
  
  function updateSelectedCount() {
    const checked = document.querySelectorAll('.bulk-select-checkbox:checked').length;
    if (selectedCountSpan) {
      selectedCountSpan.textContent = checked.toString();
    }
  }
  
  document.querySelectorAll('.bulk-select-checkbox').forEach(cb => {
    cb.addEventListener('change', updateSelectedCount);
  });
  
  bulkDeleteBtn?.addEventListener('click', async () => {
    const selected = Array.from(document.querySelectorAll('.bulk-select-checkbox:checked'))
      .map(cb => (cb as HTMLInputElement).getAttribute('data-note-id'))
      .filter(id => id);
    
    if (selected.length === 0) {
      alert('No notes selected');
      return;
    }
    
    if (confirm(`Are you sure you want to delete ${selected.length} notes?`)) {
      try {
        for (const noteId of selected) {
          await fetch(`/api/notes/${noteId}`, { method: 'DELETE' });
        }
        window.location.reload();
      } catch (error) {
        alert('Failed to delete some notes');
      }
    }
  });
  
  bulkExportBtn?.addEventListener('click', async () => {
    const selected = Array.from(document.querySelectorAll('.bulk-select-checkbox:checked'))
      .map(cb => (cb as HTMLInputElement).getAttribute('data-note-id'))
      .filter(id => id);
    
    if (selected.length === 0) {
      alert('No notes selected');
      return;
    }
    
    try {
      const response = await fetch('/api/notes');
      const allNotes = await response.json();
      const selectedNotes = allNotes.filter((note: any) => selected.includes(note.id));
      
      // Create markdown content
      const markdown = selectedNotes.map((note: any) => {
        return `# ${note.title}

**Category:** ${note.category}  
**Tags:** ${note.tags.map((tag: any) => `#${tag}`).join(', ')}  
**Updated:** ${new Date(note.updatedAt).toLocaleDateString()}  

\`\`\`${note.language}
${note.content}
\`\`\`

---

`;
      }).join('\n');
      
      // Download markdown file
      const blob = new Blob([markdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `pkm-export-selected-${new Date().toISOString().split('T')[0]}.md`;
      a.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      alert('Failed to export notes');
    }
  });
</script>